{"version":3,"sources":["style/New.module.scss","style/Game.module.scss","components/Header.tsx","components/Footer.tsx","core-data/questions/number-questions.ts","components/RadioFormGroup.tsx","core-data/game-difficulty.ts","core-data/game-type.ts","core-data/GamePhase.ts","store/questions/questions.slice.ts","store/game/game.slice.ts","core-data/open-trivia-response/response-code.ts","services/axios-factory.ts","services/questions.service.ts","store/epic.ts","store/questions/questions.epic.ts","store/store.ts","pages/New.tsx","components/Spinner.tsx","components/QuestionBox.tsx","pages/Game.tsx","pages/Endgame.tsx","error-boundaries/generic-error.tsx","App.tsx","serviceWorker.js","index.tsx","style/Endgame.module.scss"],"names":["module","exports","Header","className","Footer","NumberQuestions","href","useStyles","makeStyles","formControl","margin","color","justifyContent","legend","fontSize","marginBottom","radioGroup","formControlLabel","RadioFormGroup","options","value","onChange","classes","FormControl","component","FormLabel","RadioGroup","row","aria-label","name","e","target","map","option","index","FormControlLabel","control","Radio","label","labelPlacement","GameDifficulty","GameType","GamePhase","questionsSlice","createSlice","initialState","entities","loading","error","reducers","loadQuestions","state","action","loadQuestionDone","payload","loadQuestionError","fromQuestionsActions","actions","questionsReducer","reducer","ResponseCode","score","phase","MAIN","gameSlice","addScore","setPhase","fromGameActions","gameReducer","fetchToken","Axios","get","pipe","res","data","token","tap","newToken","window","localStorage","setItem","decorateConfigWithToken","config","params","requestInterceptor","a","getItem","console","warn","toPromise","responseInterceptor","TOKEN_NOT_FOUND","TOKEN_TO_BE_REFRESHED","includes","response_code","getConfig","mergeMap","request","axiosFactory","axios","create","baseURL","interceptors","use","response","QuestionsService","http","type","BOTH","difficulty","ANY","this","results","factory","epicMiddleware","createEpicMiddleware","dependencies","questionsService","getInstance","rootEpic","combineEpics","action$","_","filter","match","getQuestions","catchError","of","store","configureStore","questions","game","middleware","getDefaultMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","New","dispatch","history","useHistory","useEffect","numberOptions","Object","values","v","difficultyOptions","charAt","toUpperCase","slice","typeOptions","BOOLEAN","MULTIPLE","useState","numberOption","setNumberOption","difficultyOption","setDifficultyOption","typeOption","setTypeOptions","styles","form","onSubmit","preventDefault","amount","push","Button","btn","variant","size","run","Spinner","LinearProgress","require","QuestionBox","props","getAllAnswers","question","correct_answer","incorrect_answers","shuffle","concat","answers","setAnswers","dangerouslySetInnerHTML","__html","answer","onClick","length","Fragment","Error","answerQuestion","Game","useReducer","prev","currentQuestion","setCurrentQuestion","MobileStepper","steps","position","activeStep","stepper","backButton","nextButton","correct","ENDGAME","Endgame","total","box","to","GenericErrorBoundary","intervalId","hasError","timeout","setState","Math","max","errorInfo","setInterval","tick","clearInterval","children","React","Component","withRouter","App","basename","exact","path","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fc445506.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"New_container__28boz\",\"flex\":\"New_flex__3bL29\",\"text-center\":\"New_text-center__2Avl6\",\"form\":\"New_form__3bhgr\",\"btn\":\"New_btn__1oByP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Game_container__2rDUz\",\"flex\":\"Game_flex__1pOjL\",\"text-center\":\"Game_text-center__14unJ\",\"stepper\":\"Game_stepper__2lZvY\"};","import React from 'react';\r\n\r\nfunction Header() {\r\n    return(\r\n        <header className=\"main-header\">\r\n            <h1>QuizApp!</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\n\r\nfunction Footer() {\r\n    return(\r\n        <footer className=\"main-footer\">\r\n            <div className=\"container flex\">\r\n                <p>Made by Thang</p>\r\n                <a href=\"https://github.com/ducthang-vu/quizApp\"><GitHubIcon/></a>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","export enum NumberQuestions {\r\n    FIVE = '5',\r\n    TEEN = '10',\r\n    FIFTEEN = '15'\r\n}\r\n","import React from 'react';\r\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n\r\nexport interface RadioOption<T> {\r\n    value: T;\r\n    label: string;\r\n}\r\n\r\nexport interface RadioFormGroupInterface<T> {\r\n    legend: string;\r\n    options: RadioOption<T>[];\r\n    value: T;\r\n    onChange: (value: T) => any;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    formControl: {\r\n        margin: '15px 0',\r\n        color: 'white',\r\n        justifyContent: 'center'\r\n    },\r\n    legend: {\r\n        fontSize: '115%',\r\n        color: 'white',\r\n        marginBottom: '10px'\r\n    },\r\n    radioGroup: {\r\n        justifyContent: 'center'\r\n    },\r\n    formControlLabel: {\r\n        color: 'white',\r\n    }\r\n});\r\n\r\n\r\nexport default function RadioFormGroup<T>({ legend, options, value, onChange }: RadioFormGroupInterface<T>) {\r\n    const classes = useStyles();\r\n    const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => onChange(e.target.value as unknown as T);\r\n    return (\r\n        <FormControl component=\"fieldset\" className={classes.formControl}>\r\n            <FormLabel component=\"legend\" className={classes.legend}>{legend}</FormLabel>\r\n            <RadioGroup row aria-label=\"position\" name=\"position\" value={value} onChange={handleOnChange} className={classes.radioGroup}>\r\n                {\r\n                    options.map((option: RadioOption<T>, index: number) => (\r\n                        <FormControlLabel\r\n                            key={index}\r\n                            value={option.value}\r\n                            className={classes.formControlLabel}\r\n                            control={<Radio color=\"primary\"/>}\r\n                            label={option.label}\r\n                            labelPlacement=\"top\"\r\n                        />\r\n                    ))\r\n                }\r\n            </RadioGroup>\r\n        </FormControl>\r\n    );\r\n}\r\n","export enum GameDifficulty {\r\n    ANY = 'any difficulty',\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard'\r\n}\r\n","export enum GameType {\r\n    MULTIPLE = 'multiple' ,\r\n    BOOLEAN = 'boolean',\r\n    BOTH = 'both'\r\n}\r\n","export enum GamePhase {\r\n    MAIN,\r\n    ENDGAME\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Question } from '../../core-data/questions/question';\r\nimport { IGetQuestionsParams } from '../../core-data/questions/i-get-questions-params';\r\n\r\ninterface QuestionsSlice {\r\n    entities: Question[];\r\n    loading: boolean;\r\n    error: boolean;\r\n}\r\n\r\nconst initialState: QuestionsSlice = {\r\n    entities: [],\r\n    loading: false,\r\n    error: false\r\n}\r\n\r\nexport const questionsSlice = createSlice({\r\n    name: 'questions',\r\n    initialState,\r\n    reducers: {\r\n        loadQuestions: (state, action: PayloadAction<IGetQuestionsParams>) => {\r\n            state.entities = [];\r\n            state.loading = true;\r\n        },\r\n        loadQuestionDone: (state, action: PayloadAction<Question[]>) => {\r\n            state.loading = false;\r\n            state.entities = action.payload\r\n        },\r\n        loadQuestionError: (state) => {\r\n            state.loading = false;\r\n            state.error = true;\r\n        },\r\n    },\r\n});\r\n\r\n\r\nexport const fromQuestionsActions =  questionsSlice.actions;\r\nexport const questionsReducer = questionsSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { GamePhase } from '../../core-data/GamePhase';\r\n\r\ninterface GameSlice {\r\n    score: number;\r\n    phase: GamePhase;\r\n}\r\n\r\nconst initialState: GameSlice = {\r\n    score: 0,\r\n    phase: GamePhase.MAIN\r\n};\r\n\r\n\r\nexport const gameSlice = createSlice({\r\n    name: 'game',\r\n    initialState,\r\n    reducers: {\r\n        addScore: (state) => {\r\n            state.score += 1;\r\n        },\r\n        setPhase: (state, action: PayloadAction<GamePhase>) => {\r\n            state.phase = action.payload;\r\n            if (action.payload === GamePhase.MAIN) {\r\n                state.score = 0;\r\n            };\r\n        }\r\n    },\r\n});\r\n\r\n\r\nexport const fromGameActions = gameSlice.actions;\r\nexport const gameReducer = gameSlice.reducer;\r\n","/**\r\n * Code 0: Success Returned results successfully.\r\n * Code 1: No Results Could not return results. The API doesn't have enough questions for your query. (Ex. Asking for 50\r\n *          Questions in a Category that only has 20.)\r\n * Code 2: Invalid Parameter Contains an invalid parameter. Arguements passed in aren't valid. (Ex. Amount = Five)\r\n * Code 3: Token Not Found Session Token does not exist.\r\n * Code 4: Token Empty Session Token has returned all possible questions for the specified query. Resetting the Token\r\n *          is necessary.\r\n * */\r\nexport enum ResponseCode {\r\n    SUCCESS,\r\n    NO_RESULT,\r\n    INVALID,\r\n    TOKEN_NOT_FOUND,\r\n    TOKEN_TO_BE_REFRESHED\r\n}\r\n","import Axios from 'axios-observable';\r\nimport { AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { OpenTriviaTokenResponse } from '../core-data/open-trivia-response/open-trivia-token-response';\r\nimport { map, mergeMap, tap } from 'rxjs/operators';\r\nimport { ResponseCode } from '../core-data/open-trivia-response/response-code';\r\nimport { Observable } from 'rxjs';\r\nimport { AxiosFactory } from '../core-data/axios-factory';\r\n\r\n\r\nconst fetchToken: Observable<string> = Axios.get<OpenTriviaTokenResponse>('https://opentdb.com/api_token.php?command=request').pipe(\r\n    map(res => res.data.token),\r\n    tap(newToken => window.localStorage.setItem('token', newToken))\r\n);\r\n\r\nfunction decorateConfigWithToken(config: AxiosRequestConfig, token: string) {\r\n    return {\r\n        ...config,\r\n        params: {\r\n            ...config.params,\r\n            token\r\n        }\r\n    };\r\n}\r\n\r\n\r\nasync function requestInterceptor(config: AxiosRequestConfig): Promise<AxiosRequestConfig> {\r\n    let token = window.localStorage.getItem('token');\r\n    if (!token) {\r\n        console.warn('Retrieving new token.');\r\n        token = await fetchToken.toPromise();\r\n    }\r\n    return decorateConfigWithToken(config, token);\r\n}\r\n\r\nasync function responseInterceptor(value: AxiosResponse): Promise<AxiosResponse> {\r\n    if ([ResponseCode.TOKEN_NOT_FOUND, ResponseCode.TOKEN_TO_BE_REFRESHED].includes(value.data.response_code)) {\r\n        console.warn('Retrieving new token, then retry the http call.');\r\n        const getConfig = (token: string): AxiosRequestConfig => decorateConfigWithToken(value.config, token);\r\n        return fetchToken.pipe(\r\n            map(getConfig),\r\n            mergeMap(Axios.request)\r\n        ).toPromise();\r\n    }\r\n    return value;\r\n}\r\n\r\n\r\nexport const axiosFactory: AxiosFactory = () => {\r\n    const axios = Axios.create({\r\n        baseURL: 'https://opentdb.com/api.php'\r\n    });\r\n\r\n    axios.interceptors.request.use(requestInterceptor);\r\n    axios.interceptors.response.use(responseInterceptor);\r\n\r\n    return axios;\r\n};\r\n","import Axios from 'axios-observable';\r\nimport { map } from 'rxjs/operators';\r\nimport { OpenTriviaQuestionsResponse } from '../core-data/open-trivia-response/open-trivia-questions-response';\r\nimport { IGetQuestionsParams } from '../core-data/questions/i-get-questions-params';\r\nimport { GameType } from '../core-data/game-type';\r\nimport { GameDifficulty } from '../core-data/game-difficulty';\r\nimport { IQuestionsService } from '../core-data/i-questions-service';\r\nimport { Observable } from 'rxjs';\r\nimport { Question } from '../core-data/questions/question';\r\nimport { axiosFactory } from './axios-factory';\r\nimport { AxiosFactory } from '../core-data/axios-factory';\r\n\r\n\r\nexport class QuestionsService implements IQuestionsService {\r\n    static getInstance(factory: AxiosFactory = axiosFactory): QuestionsService  {\r\n        const http = factory();\r\n        return new QuestionsService(http)\r\n    }\r\n\r\n    constructor(private http: Axios) {}\r\n\r\n    getQuestions(params: IGetQuestionsParams): Observable<Question[]> {\r\n        if (params.type === GameType.BOTH) {\r\n            delete params.type;\r\n        }\r\n        if (params.difficulty === GameDifficulty.ANY) {\r\n            delete params.difficulty\r\n        }\r\n        return this.http.get<OpenTriviaQuestionsResponse>('', { params }).pipe(\r\n            map(res => res.data.results)\r\n        )\r\n    }\r\n\r\n}\r\n","import { IQuestionsService } from '../core-data/i-questions-service';\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\r\nimport { AnyAction } from '@reduxjs/toolkit';\r\nimport { QuestionsService } from '../services/questions.service';\r\nimport { questionsEpic } from './questions/questions.epic';\r\n\r\n\r\nexport interface EpicDependencies {\r\n    questionsService: IQuestionsService\r\n}\r\n\r\nexport const epicMiddleware = createEpicMiddleware<AnyAction, AnyAction, EpicDependencies>({\r\n    dependencies: {\r\n        questionsService: QuestionsService.getInstance()\r\n    }\r\n});\r\n\r\nexport const rootEpic = combineEpics(\r\n    questionsEpic,\r\n);\r\n","import { ActionsObservable, Epic } from 'redux-observable';\r\nimport { AnyAction } from '@reduxjs/toolkit';\r\nimport { fromQuestionsActions } from './questions.slice';\r\nimport { catchError, filter, map, mergeMap } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { EpicDependencies } from '../epic';\r\n\r\nexport type MyEpic = Epic<AnyAction, AnyAction, any>;\r\n\r\nexport const questionsEpic: MyEpic =\r\n    (action$: ActionsObservable<any>, _, { questionsService }: EpicDependencies) =>\r\n        action$.pipe(\r\n            filter(fromQuestionsActions.loadQuestions.match),\r\n            mergeMap(action => questionsService.getQuestions(action.payload)),\r\n            map(fromQuestionsActions.loadQuestionDone),\r\n            catchError(() => of(fromQuestionsActions.loadQuestionError()))\r\n        );\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { questionsReducer } from './questions/questions.slice';\r\nimport { gameReducer } from './game/game.slice';\r\nimport { epicMiddleware, rootEpic } from './epic';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        questions: questionsReducer,\r\n        game: gameReducer\r\n    },\r\n    middleware: [\r\n        ...getDefaultMiddleware({\r\n            thunk: false\r\n        }),\r\n        epicMiddleware\r\n    ]\r\n});\r\n\r\nexport default store;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nepicMiddleware.run(rootEpic);\r\n","import React, { FormEvent, useEffect, useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { NumberQuestions } from '../core-data/questions/number-questions';\r\nimport RadioFormGroup, { RadioOption } from '../components/RadioFormGroup';\r\nimport styles from '../style/New.module.scss';\r\nimport { GameDifficulty } from '../core-data/game-difficulty';\r\nimport { GameType } from '../core-data/game-type';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { fromQuestionsActions } from '../store/questions/questions.slice';\r\nimport { useHistory } from 'react-router';\r\nimport { IGetQuestionsParams } from '../core-data/questions/i-get-questions-params';\r\nimport { useAppDispatch } from '../store/store';\r\nimport { fromGameActions } from '../store/game/game.slice';\r\nimport { GamePhase } from '../core-data/GamePhase';\r\n\r\n\r\nexport default function New() {\r\n    const dispatch = useAppDispatch()\r\n    const history = useHistory()\r\n    useEffect(() => {\r\n        dispatch(fromGameActions.setPhase(GamePhase.MAIN))\r\n    }, [dispatch])\r\n    const numberOptions: RadioOption<NumberQuestions>[] = Object.values(NumberQuestions).map(v => ({\r\n        value: v,\r\n        label: v as string\r\n    }));\r\n\r\n    const difficultyOptions: RadioOption<GameDifficulty>[] = Object.values(GameDifficulty).map(v => ({\r\n        value: v,\r\n        label: v.charAt(0).toUpperCase() + v.slice(1)\r\n    }));\r\n\r\n    const typeOptions: RadioOption<GameType>[] = [\r\n        {\r\n            value: GameType.BOOLEAN,\r\n            label: 'True/False'\r\n        },\r\n        {\r\n            value: GameType.MULTIPLE,\r\n            label: 'Multiple'\r\n        },\r\n        {\r\n            value: GameType.BOTH,\r\n            label: 'Both'\r\n        }\r\n    ];\r\n\r\n    const onSubmit = (e: FormEvent) => {\r\n        e.preventDefault();\r\n        const payload: IGetQuestionsParams = {\r\n            amount: numberOption,\r\n            difficulty: difficultyOption,\r\n            type: typeOption\r\n        }\r\n        history.push('/game')\r\n        dispatch(fromQuestionsActions.loadQuestions(payload));\r\n    };\r\n\r\n    const [numberOption, setNumberOption] = useState(numberOptions[0].value);\r\n    const [difficultyOption, setDifficultyOption] = useState(difficultyOptions[0].value);\r\n    const [typeOption, setTypeOptions] = useState(typeOptions[0].value);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form className={styles.form} onSubmit={onSubmit}>\r\n                <h2>Start a new game!</h2>\r\n                <RadioFormGroup legend=\"Number of questions\" options={numberOptions} value={numberOption} onChange={setNumberOption}/>\r\n                <RadioFormGroup legend=\"Difficulty\" options={difficultyOptions} value={difficultyOption} onChange={setDifficultyOption}/>\r\n                <RadioFormGroup legend=\"Type\" options={typeOptions} value={typeOption} onChange={setTypeOptions}/>\r\n                <Button\r\n                    type=\"submit\"\r\n                    className={styles.btn}\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    color=\"primary\"\r\n                >\r\n                    <SendIcon/>\r\n                    <span>Start!</span>\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div>\r\n            <h2>Fetching questions...</h2>\r\n            <div>\r\n                <LinearProgress color=\"secondary\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../style/QuestionBox.scss';\r\nimport { Question } from '../core-data/questions/question';\r\nconst _ = require(\"underscore\");\r\n\r\n\r\ninterface IQuestionBox {\r\n    question: Question;\r\n    answerQuestion: (newScore: boolean) => void;\r\n    children?: any[];\r\n}\r\n\r\n\r\nexport default function QuestionBox(props: IQuestionBox) {\r\n    const getAllAnswers = (props: IQuestionBox) => {\r\n        const { correct_answer, incorrect_answers } = props.question;\r\n        return _.shuffle(incorrect_answers.concat(correct_answer));\r\n    };\r\n\r\n    const [answers, setAnswers] = useState(getAllAnswers(props));\r\n\r\n    const handleConfirm = () => {\r\n        if (answers.length !== 1) throw new Error('More than one answer');\r\n        props.answerQuestion(answers[0] === props.question.correct_answer);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setAnswers(getAllAnswers(props));\r\n        }, [props]\r\n    );\r\n\r\n    return (\r\n        <div className=\"question-box\">\r\n            <h3\r\n                className=\"question-box__title\"\r\n                dangerouslySetInnerHTML={{ __html: props.question.question }}>\r\n            </h3>\r\n\r\n            {answers.map((answer: string, index: number) =>\r\n                <button\r\n                    key={index}\r\n                    className=\"question-box__btn answer-btn\"\r\n                    onClick={() => setAnswers([answer])}\r\n                    dangerouslySetInnerHTML={{ __html: answer }}\r\n                >\r\n                </button>\r\n            )}\r\n\r\n            {answers.length === 1 && <React.Fragment>\r\n                <button\r\n                    className=\"question-box__btn confirm-btn\"\r\n                    onClick={handleConfirm}\r\n                >CONFIRM\r\n                </button>\r\n                <button\r\n                    className=\"question-box__btn cancel-btn\"\r\n                    onClick={() => setAnswers(getAllAnswers(props))}\r\n                >Cancel\r\n                </button>\r\n            </React.Fragment>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import Spinner from '../components/Spinner';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { MobileStepper } from '@material-ui/core';\r\nimport QuestionBox from '../components/QuestionBox';\r\nimport styles from '../style/Game.module.scss';\r\nimport { fromGameActions } from '../store/game/game.slice';\r\nimport { useHistory } from 'react-router';\r\nimport { useAppDispatch, useAppSelector } from '../store/store';\r\nimport { GamePhase } from '../core-data/GamePhase';\r\n\r\n\r\nexport default function Game() {\r\n    const dispatch = useAppDispatch();\r\n    const history = useHistory()\r\n\r\n    const loading = useAppSelector(state => state.questions.loading);\r\n    const questions = useAppSelector(state => state.questions.entities);\r\n    const error = useAppSelector(state => state.questions.error);\r\n\r\n    const [currentQuestion, setCurrentQuestion] = useReducer(prev => ++prev, 0);\r\n\r\n    useEffect(() => {\r\n        if (error) history.push('/')\r\n    }, [history, error])\r\n\r\n    const counter = (): string => `${currentQuestion + 1}/${questions.length}`;\r\n\r\n    const answerQuestion = (correct=false): void => {\r\n        if (correct) {\r\n            dispatch(fromGameActions.addScore());\r\n        }\r\n        if (currentQuestion + 1 >= questions.length) {\r\n            dispatch(fromGameActions.setPhase(GamePhase.ENDGAME))\r\n            history.push('/endgame')\r\n        } else {\r\n            setCurrentQuestion();\r\n        }\r\n    };\r\n\r\n    if (loading) return (\r\n        <Spinner/>\r\n    );\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <MobileStepper\r\n                variant=\"progress\"\r\n                steps={questions.length}\r\n                position=\"static\"\r\n                activeStep={currentQuestion}\r\n                className={styles.stepper}\r\n                backButton=\"\"\r\n                nextButton=\"\"\r\n            />\r\n            <h2>Question {counter()} </h2>\r\n            <QuestionBox\r\n                question={questions[currentQuestion]}\r\n                answerQuestion={answerQuestion}>\r\n            </QuestionBox>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { useAppSelector } from '../store/store';\nimport { GamePhase } from '../core-data/GamePhase';\nimport { useHistory } from 'react-router';\nimport styles from '../style/Endgame.module.scss';\n\n\nexport default function Endgame() {\n    const score = useAppSelector(state => state.game.score);\n    const total = useAppSelector(state => state.questions.entities).length;\n    const phase = useAppSelector(state => state.game.phase);\n    const history = useHistory();\n\n    if (phase !== GamePhase.ENDGAME) {\n        history.push('/')\n    }\n\n    return (\n        <div className=\"container text-center\">\n            <div className={styles.box}>\n                <h2>Congratulations!</h2>\n                <p className={styles.score}>\n                    Your score final score is: <span>{score}/{total}</span>\n                </p>\n                <Link to=\"/\" className={styles.btn}>\n                    <Button variant=\"contained\" color=\"primary\">\n                        Play again!\n                    </Button>\n                </Link>\n            </div>\n        </div>\n    );\n}\n","import React, { ErrorInfo } from 'react';\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\n\r\n\r\ninterface ErrorBoundaryStateProps extends RouteComponentProps<any> {\r\n    children: JSX.Element\r\n}\r\n\r\ninterface ErrorBoundaryState {\r\n    hasError: boolean;\r\n    timeout: number;\r\n}\r\n\r\n\r\nclass GenericErrorBoundary extends React.Component<ErrorBoundaryStateProps, ErrorBoundaryState> {\r\n    private intervalId: number | undefined;\r\n\r\n    static getDerivedStateFromError(error: Error) {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n            timeout: 5\r\n        };\r\n    }\r\n\r\n    private tick() {\r\n        const update = (prev:ErrorBoundaryState): ErrorBoundaryState => ({\r\n            hasError: true,\r\n            timeout: Math.max(prev.timeout - 1, 0)\r\n        })\r\n        this.setState(update);\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n        console.error(error, errorInfo);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.hasError) {\r\n            this.intervalId = window.setInterval(() => this.tick(), 1000);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.hasError) {\r\n            this.intervalId = window.setInterval(() => this.tick(), 1000);\r\n        }\r\n        if (this.state.timeout <= 0) {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalId)\r\n    }\r\n\r\n    render() {\r\n        const { hasError, timeout } = this.state;\r\n        if (hasError) {\r\n            return (\r\n                <div className=\"container\">\r\n                    <h1>Something went wrong.</h1>\r\n                    <p>You will be redirect to home in {timeout} seconds...</p>\r\n                </div>\r\n            );\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default withRouter<any, any>(GenericErrorBoundary);\r\n","import React from 'react';\r\nimport './style/App.scss';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport New from './pages/New';\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport Game from './pages/Game';\r\nimport Endgame from './pages/Endgame';\r\nimport GenericErrorBoundary from './error-boundaries/generic-error';\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"app flex\">\r\n            <Header/>\r\n            <main>\r\n                <BrowserRouter basename=\"/quizApp\">\r\n                    <Switch>\r\n                        <Route exact path=\"/\">\r\n                            <New />\r\n                        </Route>\r\n                        <Route exact path=\"/game\">\r\n                            <GenericErrorBoundary><Game /></GenericErrorBoundary>\r\n                        </Route>\r\n                        <Route exact path=\"/endgame\">\r\n                            <Endgame />\r\n                        </Route>\r\n                        <Route path=\"*\">\r\n                            <Redirect to=\"/\" />\r\n                        </Route>\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </main>\r\n            <Footer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/store'\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <React.StrictMode>\r\n            <App/>\r\n        </React.StrictMode>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Endgame_container__BI0Ey\",\"flex\":\"Endgame_flex__1SoW0\",\"text-center\":\"Endgame_text-center__2L0Hf\",\"box\":\"Endgame_box__3hRO8\",\"score\":\"Endgame_score__146QQ\",\"btn\":\"Endgame_btn__dPF2-\"};"],"sourceRoot":""}