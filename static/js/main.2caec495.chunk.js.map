{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Spinner.jsx","containers/QuestionBox.jsx","components/FinalResult.jsx","containers/MainContent.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Header","className","Footer","Spinner","id","LinearProgress","color","_","require","QuestionBox","props","getAllAnswers","question","correct_answer","incorrect_answers","shuffle","concat","useState","answers","setAnswers","useEffect","dangerouslySetInnerHTML","__html","map","answer","index","key","onClick","length","Fragment","Error","newScore","answerQuestion","FinalResult","score","total","window","location","reload","MainContent","currentQuestion","setCurrentQuestion","setScore","questions","MobileStepper","variant","steps","position","activeStep","backButton","nextButton","App","setQuestions","axios","get","then","response","data","results","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2caec495.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../style/Header.scss'\r\n\r\nfunction Header() {\r\n    return(\r\n        <header className=\"main-header\">\r\n            <h1>QuizApp!</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport '../style/Footer.scss'\r\n\r\nfunction Footer() {\r\n    return(\r\n        <footer className=\"main-footer\">\r\n            <div className=\"container\">\r\n                <p>Made by Thang</p>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\nimport '../style/MainWaiting.scss'\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className=\"main-waiting\">\r\n            <h2>Fetching questions...</h2>\r\n            <div id=\"canvas-wrapper\">\r\n                <LinearProgress color=\"secondary\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../style/QuestionBox.scss'\r\nconst _ = require(\"underscore\");\r\n\r\nfunction QuestionBox(props) {\r\n    const getAllAnswers = (props) => {\r\n        const { correct_answer, incorrect_answers } = props.question\r\n        return _.shuffle(incorrect_answers.concat(correct_answer))\r\n    }\r\n\r\n    const [answers, setAnswers] = useState(getAllAnswers(props))\r\n\r\n    const handleConfirm = () => {\r\n        if (answers.length !== 1) throw new Error('More than one answer')\r\n        const newScore = answers[0] === props.question.correct_answer ? 1 : 0\r\n        props.answerQuestion(newScore)\r\n    }\r\n\r\n    useEffect(()=> {\r\n        setAnswers(getAllAnswers(props))\r\n        }, [props]\r\n    )\r\n\r\n    return(\r\n        <div className=\"question-box\">\r\n            <h3 \r\n                className=\"question-box__title\"\r\n                dangerouslySetInnerHTML={{ __html: props.question.question }}>\r\n            </h3>\r\n\r\n            {answers.map((answer, index) => \r\n                <button \r\n                    key={index} \r\n                    className=\"question-box__btn answer-btn\"\r\n                    onClick={() => setAnswers([answer])}\r\n                    dangerouslySetInnerHTML={{ __html: answer }}\r\n                >\r\n                </button>\r\n            )}\r\n\r\n            {answers.length === 1 && <React.Fragment>\r\n                                        <button \r\n                                            className=\"question-box__btn confirm-btn\"\r\n                                            onClick={handleConfirm}\r\n                                        >CONFIRM\r\n                                        </button>\r\n                                        <button \r\n                                            className=\"question-box__btn cancel-btn\"\r\n                                            onClick={() => setAnswers(getAllAnswers(props))}\r\n                                        >Cancel\r\n                                        </button>\r\n                                    </React.Fragment>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionBox\r\n","import React from 'react';\r\nimport '../style/FinalResult.scss'\r\n\r\nfunction FinalResult(props) {\r\n    const {score, total} = props.score\r\n    return(\r\n        <div className=\"final-result\">\r\n            <div className=\"container\">\r\n                <h2 className=\"title\">Congratulations!</h2>\r\n                <p className=\"score\">\r\n                    Your score final score is: <span>{score}/{total}</span>\r\n                </p>\r\n                <button onClick={() => window.location.reload()}>Play again!</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FinalResult\r\n","import React, { useState } from 'react';\r\nimport QuestionBox from './QuestionBox'\r\nimport FinalResult from '../components/FinalResult';\r\nimport '../style/MainContent.scss'\r\nimport { MobileStepper } from '@material-ui/core';\r\n\r\nfunction MainContent(props) {\r\n    const [currentQuestion, setCurrentQuestion] = useState(0)\r\n    const counter = () => `${currentQuestion + 1}/${props.questions.length}`\r\n    const [score, setScore] = useState(0)\r\n    const answerQuestion = (newScore) => {\r\n        setScore(score + newScore)\r\n        setCurrentQuestion(currentQuestion + 1)\r\n    }\r\n\r\n    return(\r\n        <div className=\"main-content\">\r\n            <div className=\"container\">\r\n                {currentQuestion < props.questions.length ?\r\n                    <React.Fragment>\r\n                        <MobileStepper\r\n                            variant=\"progress\"\r\n                            steps={10}\r\n                            position=\"static\"\r\n                            activeStep={currentQuestion}\r\n                            className=\"stepper\"\r\n                            backButton=\"\"\r\n                            nextButton=\"\"\r\n                        />\r\n                        <h2>Question {counter()} </h2>\r\n                        <QuestionBox \r\n                            question={props.questions[currentQuestion]}\r\n                            answerQuestion={answerQuestion}\r\n                        >\r\n                        </QuestionBox> \r\n                    </React.Fragment> :\r\n                    <FinalResult score={{score, total: props.questions.length}} />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainContent\r\n","import React, { useState, useEffect } from 'react'\r\nimport './style/App.scss'\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer'\r\nimport Spinner from './components/Spinner'\r\nimport MainContent from './containers/MainContent'\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [questions, setQuestions] = useState([])\r\n\r\n  useEffect(() => {\r\n    axios.get('https://opentdb.com/api.php?amount=10')\r\n      .then(response => setQuestions(response.data.results)) \r\n  }, [])  // no catch\r\n\r\n  return (\r\n    <div className=\"app flex\">\r\n        <Header></Header>\r\n        <main>\r\n          { questions.length ? <MainContent questions={questions}></MainContent> : <Spinner></Spinner> }\r\n        </main>\r\n        <Footer></Footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.scss'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}