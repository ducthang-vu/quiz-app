{"version":3,"sources":["components/Header.js","components/Footer.js","components/MainWaiting.js","components/QuestionBox.js","components/FinalResult.js","components/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","MainWaiting","canvasRef","useRef","useEffect","canvas","current","canvasWrapper","document","getElementById","width","offsetWidth","height","offsetHeight","c","getContext","CircleDot","x","y","radius","color","this","angle","Math","random","PI","arcAngle","beginPath","strokeStyle","moveTo","cos","sin","lineTo","lineWidth","stroke","dotsNumber","maxTranslateSpeed","translateSpeed","dots","i","push","animate","rect","fillStyle","fill","requestAnimationFrame","addCanvasLayer","dot","move","print","id","ref","_","require","QuestionBox","props","getAllAnswers","question","correct_answer","incorrect_answers","shuffle","concat","useState","answers","setAnswers","dangerouslySetInnerHTML","__html","map","answer","index","key","onClick","length","Fragment","Error","newScore","answerQuestion","FinalResult","score","total","window","location","reload","MainContent","currentQuestion","setCurrentQuestion","setScore","questions","App","setQuestions","axios","get","then","response","data","results","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7d9fc3d.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../style/Header.scss'\r\n\r\nfunction Header() {\r\n    return(\r\n        <header className=\"main-header\">\r\n            <h1>QuizApp!</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport '../style/Footer.scss'\r\n\r\nfunction Footer() {\r\n    return(\r\n        <footer className=\"main-footer\">\r\n            <div className=\"container\">\r\n                <p>Made by Thang</p>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { useRef, useEffect } from 'react';\r\nimport '../style/MainWaiting.scss'\r\n\r\nfunction MainWaiting() {\r\n    const canvasRef = useRef()\r\n    useEffect(()=> {\r\n        const canvas = canvasRef.current\r\n        const canvasWrapper = document.getElementById('canvas-wrapper')\r\n        canvas.width = canvasWrapper.offsetWidth;\r\n        canvas.height = canvasWrapper.offsetHeight;\r\n\r\n        const c = canvas.getContext('2d')\r\n        \r\n        class CircleDot {\r\n            constructor(x, y, radius, color) {\r\n                this.x = x\r\n                this.y = y\r\n                this.radius = radius\r\n                this.color = color\r\n                this.angle = Math.random() * 2 * Math.PI \r\n                this.arcAngle = 0.10\r\n            }\r\n\r\n            move() {\r\n                this.angle += this.arcAngle / 2\r\n            }\r\n\r\n            print() {\r\n                c.beginPath()\r\n                c.strokeStyle = this.color\r\n                c.moveTo(this.x + this.radius * Math.cos(this.angle), this.y + this.radius * Math.sin(this.angle));\r\n                c.lineTo(this.x + this.radius * Math.cos(this.angle + this.arcAngle), this.y + this.radius * Math.sin(this.angle + this.arcAngle));\r\n                c.lineWidth = 2\r\n                c.stroke(); \r\n            }\r\n        }\r\n        \r\n        class Animation {\r\n            constructor(dotsNumber, maxTranslateSpeed) {\r\n                this.dotsNumber = dotsNumber\r\n                this.translateSpeed = maxTranslateSpeed\r\n                this.dots = []\r\n        \r\n                for (let i = 0; i < dotsNumber; i++) {\r\n                    this.dots.push(new CircleDot(canvas.width / 2, canvas.height / 2, Math.random() * 20 + 50, 'green') )\r\n                }\r\n\r\n                this.animate()\r\n            }\r\n\r\n            addCanvasLayer() {\r\n                c.beginPath()\r\n                c.rect(0, 0, canvas.width, canvas.height)\r\n                c.fillStyle = 'rgba(242, 240, 242, 0.5)'\r\n                c.fill()\r\n            }\r\n            \r\n            animate() {\r\n                requestAnimationFrame(() => this.animate())\r\n\r\n                this.addCanvasLayer()\r\n                for (let dot of this.dots) {\r\n                    dot.move()\r\n                    dot.print()\r\n                }\r\n            }\r\n        }\r\n        new Animation(30, 1)\r\n        }, []\r\n    )\r\n\r\n    return(\r\n        <div className=\"main-waiting\">\r\n            <h2>Fetching questions...</h2>\r\n            <div id=\"canvas-wrapper\">\r\n                <canvas id=\"canvas\" ref={canvasRef}></canvas>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainWaiting","import React, { useState, useEffect } from 'react';\r\nimport '../style/QuestionBox.scss'\r\nconst _ = require(\"underscore\");\r\n\r\nfunction QuestionBox(props) {\r\n    const getAllAnswers = (props) => {\r\n        const { correct_answer, incorrect_answers } =  props.question\r\n        return _.shuffle(incorrect_answers.concat(correct_answer))\r\n    }\r\n\r\n    const [answers, setAnswers] = useState(getAllAnswers(props))\r\n\r\n    const handleConfirm = () => {\r\n        if (answers.length !== 1) throw new Error('More than one answer')\r\n        const newScore = answers[0] === props.question.correct_answer ? 1 : 0\r\n        props.answerQuestion(newScore)\r\n    }\r\n\r\n    useEffect(()=> {\r\n        setAnswers(getAllAnswers(props))\r\n        }, [props]\r\n    )\r\n\r\n    return(\r\n        <div className=\"question-box\">\r\n            <h3 \r\n                className=\"question-box__title\"\r\n                dangerouslySetInnerHTML={{ __html: props.question.question }}>\r\n            </h3>\r\n\r\n            {answers.map((answer, index) => \r\n                <button \r\n                    key={index} \r\n                    className=\"question-box__btn answer-btn\"\r\n                    onClick={() => setAnswers([answer])}\r\n                    dangerouslySetInnerHTML={{ __html: answer }}\r\n                >\r\n                </button>\r\n            )}\r\n\r\n            {answers.length === 1 && <React.Fragment>\r\n                                        <button \r\n                                            className=\"question-box__btn confirm-btn\"\r\n                                            onClick={handleConfirm}\r\n                                        >CONFIRM\r\n                                        </button>\r\n                                        <button \r\n                                            className=\"question-box__btn cancel-btn\"\r\n                                            onClick={() => setAnswers(getAllAnswers(props))}\r\n                                        >Cancel\r\n                                        </button>\r\n                                    </React.Fragment>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionBox","import React from 'react';\r\nimport '../style/FinalResult.scss'\r\n\r\nfunction FinalResult(props) {\r\n    const {score, total} = props.score\r\n    return(\r\n        <div className=\"final-result\">\r\n            <div className=\"container\">\r\n                <h2 className=\"title\">Congratulations!</h2>\r\n                <p className=\"score\">\r\n                    Your score final score is: <span>{score}/{total}</span>\r\n                </p>\r\n                <button onClick={() => window.location.reload()}>Play again!</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FinalResult","import React, { useState } from 'react';\r\nimport QuestionBox from './QuestionBox'\r\nimport FinalResult from './FinalResult';\r\nimport '../style/MainContent.scss'\r\n\r\nfunction MainContent(props) {\r\n    const [currentQuestion, setCurrentQuestion] = useState(0)\r\n    const counter = () => `${currentQuestion + 1}/${props.questions.length}`\r\n    const [score, setScore] = useState(0)\r\n    const answerQuestion = (newScore) => {\r\n        setScore(score + newScore)\r\n        setCurrentQuestion(currentQuestion + 1)\r\n    }\r\n\r\n    return(\r\n        <div className=\"main-content\">\r\n            <div className=\"container\">\r\n                {currentQuestion < props.questions.length ?\r\n                    <React.Fragment>\r\n                        <h2>Question {counter()} </h2>\r\n                        <QuestionBox \r\n                            question={props.questions[currentQuestion]}\r\n                            answerQuestion={answerQuestion}\r\n                        >\r\n                        </QuestionBox> \r\n                    </React.Fragment> :\r\n                    <FinalResult\r\n                        score={{score, total: props.questions.length}}\r\n                    ></FinalResult>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainContent","import React, { useState, useEffect } from 'react'\nimport './style/App.scss'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport MainWaiting from './components/MainWaiting'\nimport MainContent from './components/MainContent'\nimport axios from 'axios';\n\nfunction App() {\n  const [questions, setQuestions] = useState([])\n\n  useEffect(() => {\n    axios.get('https://opentdb.com/api.php?amount=10')\n      .then(response => setQuestions(response.data.results)) \n  }, [])  // no catch\n\n  return (\n    <div className=\"app flex\">\n        <Header></Header>\n        <main>\n          {questions.length ? \n            <MainContent questions={questions}></MainContent> : \n            <MainWaiting></MainWaiting>}\n        </main>\n        <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}